# Test code for the vmware_tag CRUD Operations.
# Copyright: (c) 2020, Dustin Scott <sdustin@vmware.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- import_role:
    name: prepare_vmware_tests

- block:
  - name: Create category
    vmware_category:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: false
      category_name: "{{ cat_one }}"
      category_cardinality: 'multiple'
      state: present
    register: category_one_create

  - name: Set category one id
    set_fact: cat_one_id={{ category_one_create['category_results']['category_id'] }}

  - name: Create tag
    vmware_tag:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: false
      tag_name: "{{ tag_one }}"
      category_id: "{{ cat_one_id }}"
      state: present
    register: tag_one_create

  - name: Check tag is created
    assert:
      that:
        - tag_one_create.changed

  - &policy_create
    name: Create or update a vSphere tag-based storage policy
    community.vmware.vmware_vm_storage_policy:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: false
      name: "{{ policy_one }}"
      description: "{{ policy_one }}"
      tag_category: "{{ cat_one }}"
      tag_name: "{{ tag_one }}"
      tag_affinity: true
      state: "present"
    register: policy_create

  - name: Check policy is created
    assert:
      that:
        - policy_create.changed

  - <<: *policy_create
    name: Create policy again

  - name: Check policy is created
    assert:
      that:
        - not policy_create.changed

  - &policy_delete
    name: Remove a vSphere tag-based storage policy
    community.vmware.vmware_vm_storage_policy:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: false
      name: "{{ policy_one }}"
      state: "absent"
    register: policy_delete

  - name: Check policy is deleted
    assert:
      that:
        - policy_delete.changed

  - <<: *policy_delete
    name: Delete policy again

  - name: Check policy is deleted
    assert:
      that:
        - not policy_delete.changed

  # The tests are the failure test for issue 677.
  # https://github.com/ansible-collections/community.vmware/issues/677
  - name: The failure test when tag_category not exists
    community.vmware.vmware_vm_storage_policy:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: false
      name: "storage policy for issue 667"
      description: "issue667"
      tag_category: "issue667"
      tag_name: "{{ tag_one }}"
      tag_affinity: true
      state: "present"
    ignore_errors: true
    register: policy_failure_test1

  - name: Make sure if the task failed and an error message displayed including tag_category name
    assert:
      that:
        - policy_failure_test1.failed is sameas true
        - "'issue667 is not found in vCenter Server tag categories' in policy_failure_test1.msg"

  - name: The failure test when tag_name not exists
    community.vmware.vmware_vm_storage_policy:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: false
      name: "storage policy for issue 667"
      description: "issue667"
      tag_category: "{{ cat_one }}"
      tag_name: "issue667"
      tag_affinity: true
      state: "present"
    ignore_errors: true
    register: policy_failure_test2

  - name: Make sure if the task failed and an error message displayed including tag_name name
    assert:
      that:
        - policy_failure_test2.failed is sameas true
        - "'issue667 is not found in vCenter Server tags' in policy_failure_test2.msg"

  always:

  - name: Delete Tags
    vmware_tag:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: false
      tag_name: "{{ item }}"
      category_id: "{{ cat_one_id }}"
      state: absent
    register: delete_tag
    with_items:
      - "{{ tag_one }}"

  - name: Delete Categories
    vmware_category:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vcenter_username }}'
      password: '{{ vcenter_password }}'
      validate_certs: false
      category_name: "{{ item }}"
      state: absent
    register: delete_categories
    with_items:
      - "{{ cat_one }}"
  vars:
    cat_one: category_1004
    tag_one: tag_1004
    policy_one: policy_1004

# -------------------------------------------------------------
# multiple keys

- name: add multiple keys
  authorized_key:
    user: root
    key: "{{ multiple_key_base }}"
    state: present
    path: "{{ output_dir | expanduser }}/authorized_keys"
  register: result

- name: assert that the key was added
  assert:
    that:
    - 'result.changed == True'
    - 'result.key == multiple_key_base'
    - 'result.key_options == None'

- name: add multiple keys different order
  authorized_key:
    user: root
    key: "{{ multiple_key_different_order }}"
    state: present
    path: "{{ output_dir | expanduser }}/authorized_keys"
  register: result

- name: assert that the key was added
  assert:
    that:
    - 'result.changed == True'
    - 'result.key == multiple_key_different_order'
    - 'result.key_options == None'

- name: add multiple keys exclusive
  authorized_key:
    user: root
    key: "{{ multiple_key_exclusive }}"
    state: present
    path: "{{ output_dir | expanduser }}/authorized_keys"
    exclusive: true
  register: result

- name: assert that the key was added
  assert:
    that:
      - 'result.changed == True'
      - 'result.key == multiple_key_exclusive'
      - 'result.key_options == None'

- name: add multiple keys in different calls
  authorized_key:
    user: root
    key: "ecdsa-sha2-nistp521 ECDSA_DATA 4@testing"
    state: present
    path: "{{ output_dir | expanduser }}/authorized_keys"
  register: result

- name: add multiple keys in different calls
  authorized_key:
    user: root
    key: "ssh-rsa DATA_BASIC 1@testing"
    state: present
    path: "{{ output_dir | expanduser }}/authorized_keys"
  register: result

- name: get the file content
  shell: cat "{{ output_dir | expanduser }}/authorized_keys"
  changed_when: no
  register: multiple_keys_at_a_time

- name: assert that the key was added
  assert:
    that:
      - 'result.changed == false'
      - 'multiple_keys_at_a_time.stdout  == multiple_key_exclusive.strip()'

- name: add multiple keys comment
  authorized_key:
    user: root
    key: "{{ multiple_keys_comments }}"
    state: present
    path: "{{ output_dir | expanduser }}/authorized_keys"
    exclusive: true
  register: result

- name: get the file content
  shell: cat "{{ output_dir | expanduser }}/authorized_keys"
  changed_when: no
  register: multiple_keys_comments

- name: assert that the keys exist and comment only lines were not added
  assert:
    that:
      - 'result.changed == False'
      - 'multiple_keys_comments.stdout == multiple_key_exclusive.strip()'
      - 'result.key_options == None'
